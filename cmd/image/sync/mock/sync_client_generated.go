// Copyright 2022 IBM Corp
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: ./sync_client.go
//
// Generated by this command:
//
//	mockgen -source=./sync_client.go -destination=./mock/sync_client_generated.go -package=mock -copyright_file=../../../hack/copyright_file
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSyncClient is a mock of SyncClient interface.
type MockSyncClient struct {
	ctrl     *gomock.Controller
	recorder *MockSyncClientMockRecorder
}

// MockSyncClientMockRecorder is the mock recorder for MockSyncClient.
type MockSyncClientMockRecorder struct {
	mock *MockSyncClient
}

// NewMockSyncClient creates a new mock instance.
func NewMockSyncClient(ctrl *gomock.Controller) *MockSyncClient {
	mock := &MockSyncClient{ctrl: ctrl}
	mock.recorder = &MockSyncClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncClient) EXPECT() *MockSyncClientMockRecorder {
	return m.recorder
}

// CheckBucketLocationConstraint mocks base method.
func (m *MockSyncClient) CheckBucketLocationConstraint(bucketName, bucketLocationConstraint string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBucketLocationConstraint", bucketName, bucketLocationConstraint)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBucketLocationConstraint indicates an expected call of CheckBucketLocationConstraint.
func (mr *MockSyncClientMockRecorder) CheckBucketLocationConstraint(bucketName, bucketLocationConstraint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBucketLocationConstraint", reflect.TypeOf((*MockSyncClient)(nil).CheckBucketLocationConstraint), bucketName, bucketLocationConstraint)
}

// CopyObjectToBucket mocks base method.
func (m *MockSyncClient) CopyObjectToBucket(srcBucketName, destBucketName, objectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyObjectToBucket", srcBucketName, destBucketName, objectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyObjectToBucket indicates an expected call of CopyObjectToBucket.
func (mr *MockSyncClientMockRecorder) CopyObjectToBucket(srcBucketName, destBucketName, objectName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyObjectToBucket", reflect.TypeOf((*MockSyncClient)(nil).CopyObjectToBucket), srcBucketName, destBucketName, objectName)
}

// SelectObjects mocks base method.
func (m *MockSyncClient) SelectObjects(bucketName, regex string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectObjects", bucketName, regex)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectObjects indicates an expected call of SelectObjects.
func (mr *MockSyncClientMockRecorder) SelectObjects(bucketName, regex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectObjects", reflect.TypeOf((*MockSyncClient)(nil).SelectObjects), bucketName, regex)
}
